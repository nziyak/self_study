#Import the NumPy library
import numpy as np

#Define the append_names function
def append_names(names_list):
    global data

    for i in names_list:
        data = np.append(data, names.index(i))

#Define the append_performance_measures function
def append_performance_measures(feature_list):
    global data
    data = np.append(data, feature_list)

#Define the calculate_performance function
def calculate_performance(employee_name):
    idx = names.index(employee_name)
    number_of_calls = data[1, idx]
    avg_deal_size = data[2, idx]
    revenue = data[3, idx]

    score = (avg_deal_size*revenue)/number_of_calls

    return score

#Copy the lists "names", "call_numbers", "average_deal_size", and "revenues" from chapter 3
names = ['Ben', 'Omer', 'Karen', 'Celine', 'Sue', 'Bora', 'Rose', 'Ellen', 'Bob', 'Taylor,', 'Jude']
call_numbers =  [300, 10, 500, 70, 100, 100, 600, 800, 200, 450, 80]
average_deal_size =  [8, 6, 24, 32, 5, 25, 25, 40, 15, 10, 12]
revenues =  [2400, 60, 12000, 2275, 500, 770, 4000, 6000, 800, 1200, 500]

#Create an empty array with the data type integer
data = np.array([], dtype=int) #[] means that array is now empty, dtype indicates the data type that array will hold
#note that dtype defaults to float

#Use the append_names and append_sales_performance_measures to add the data
append_names(names)
append_performance_measures(call_numbers)
append_performance_measures(average_deal_size)
append_performance_measures(revenues)

#Print the array and its shape to see the result
print("\n**********shaped data*********\n")
print(data)
print(data.shape)
print()
#Use the .reshape() method to change the array structure to 4 rows and 11 columns
data = data.reshape(4,11)

#Print the resulting array and its shape
print("**********reshaped data*********\n")
print(data)
print(data.shape)
print()

#print the name indexes
print("name indexes: ", data[0])
print()

#print the number of calls
print("number of calls: ", data[1])
print()

#print the average deal sizes
print("average deal sizes: ", data[2])
print()

#print the revenues
print("revenues: ", data[3])
print()

#print the revenue generated by Ellen
print("revenue generated by Ellen: ", data[3,7])
print()

print("Performance of Ellen: ", calculate_performance("Ellen"))
print()

performance_scores = []

for name in names:
    score = int(calculate_performance(name))
    performance_scores.append(score)

data = np.concatenate((data, [performance_scores]), axis=0) #because of the data set is 2D, we pass the performance_scores in []
#axis argument specifies which axis the new data will be added to. the value 0 indicates the vertical axis, the value 1 indicates the horizontal axis.

print("*******data array with performance scores********\n\n", data)
print()

idx_best_employee = np.argmax(data[4])
idx_worst_employee = np.argmin(data[4])

print(f"Best performing employee: {names[idx_best_employee]}")
print(f"Worst performing employee: {names[idx_worst_employee]}")